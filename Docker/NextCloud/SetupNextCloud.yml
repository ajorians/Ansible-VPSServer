# Run with
# ansible-playbook SetupNextcloud.yml
# https://nextcloud.com/ 

---
- name: Setup NextCloud
  hosts: all
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:

  - name: Check if config file exists
    stat:
      path: /opt/DockerSwarmData/nextcloud/config/www/nextcloud/config/config.php
    register: configphp_exists

#  - name: Stop the Nextcloud container
#    community.docker.docker_container:
#      name: nextcloud
#      state: stopped
#    when: configphp_exists.stat.exists == false

#  - name: Remove the Nextcloud container
#    community.docker.docker_container:
#      name: nextcloud
#      state: absent
#    when: configphp_exists.stat.exists == false

#  - name: Delete Nextloud directory and its contents
#    ansible.builtin.file:
#      path: /opt/DockerSwarmData/nextcloud
#      state: absent
#    when: configphp_exists.stat.exists == false

  - name: Create directory for data
    file:
      path: "{{ item }}"
      state: directory
      owner: ajorians
      group: users
      mode: 0777
    loop:
      - /opt/DockerSwarmData/nextcloud
      - /opt/DockerSwarmData/nextcloud/config
      - /opt/DockerSwarmData/nextcloud/data
      - /root/docker
      - /root/docker/nextcloud

  - name: Create Database
    community.mysql.mysql_db:
      login_user: root
      name:
        - nextcloud
      state: present

  - name: Grant user access
    community.mysql.mysql_user:
      login_user: root
      state: present
      name: nextuser
      host: '%'
      password: nextpassword 
      priv:
        'nextcloud.*': 'ALL,GRANT'

  - name: Copy the docker-compose file with owner and permissions
    ansible.builtin.copy:
      src: docker-compose.yml
      dest: /root/docker/nextcloud
      owner: ajorians
      group: users
      mode: 0777

  - name: Deploy NextCloud from a compose file
    community.docker.docker_compose_v2:
      project_src: /root/docker/nextcloud

  - name: Check if config file exists post install
    stat:
      path: /opt/DockerSwarmData/nextcloud/config/www/nextcloud/config/config.php
    register: configphp_post_exists

  - name: Check if trusted_domains key exists in config.php
    ansible.builtin.command: grep -q trusted_domains /opt/DockerSwarmData/nextcloud/config/www/nextcloud/config/config.php
    register: trusted_domains_check
    failed_when: trusted_domains_check.rc > 1
    changed_when: false
    when: configphp_post_exists.stat.exists == true

  - name: Set default for trusted_domains_check if config.php doesn't exist
    set_fact:
      trusted_domains_check:
        rc: 1
    when: not configphp_post_exists.stat.exists

  - name: Add new trusted domain to Nextcloud config.php
    lineinfile:
      path: /opt/DockerSwarmData/nextcloud/config/www/nextcloud/config/config.php
      insertafter: "0 => '127.0.0.1:5600',"
      line: "    1 => 'nextcloud.orians.org',"
    when: trusted_domains_check.rc == 0

  - name: Replace the overwrite.cli.url
    ansible.builtin.lineinfile:
      path: /opt/DockerSwarmData/nextcloud/config/www/nextcloud/config/config.php
      regexp: "^  'overwrite.cli.url' => 'http://127.0.0.1:5600',"
      line: "  'overwrite.cli.url' => 'https://nextcloud.orians.org',"
      state: present
    when: configphp_post_exists.stat.exists == true and trusted_domains_check.rc == 0

  - name: Make Apache VHost file
    ansible.builtin.copy:
      dest: /etc/apache2/vhosts.d/nextcloud.conf
      force: false
      content: |
        <VirtualHost *:80>
          ServerName nextcloud.orians.org
          ServerAlias nextcloud.stage.orians.org nextcloud
          ProxyPass / http://127.0.0.1:5600/
          ProxyPassReverse / http://127.0.0.1:5600/
        </VirtualHost>
    notify:
    - Restart Apache2 service

  handlers:
    - name: Restart Apache2 service
      ansible.builtin.systemd:
        state: restarted
        name: apache2
